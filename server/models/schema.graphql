scalar DateTime

type Query {
  user(sessionHash: String!): User
  post(postId: ID!): Post
  publishedPosts: [Post!]!
  postsByUser(userId: ID!): [Post!]!
  blogPosts(name: String!, skip: Int!, first: Int!): [Post!]!
}

type Mutation {
  createUser(name: String!, sessionHash: String!): User
  createBlog(name: String!): Blog!
  createPost(content: String!, userId: ID!, blogId: String!): Post
  setUserName(userId: ID!, name: String!): User
  setPostStatus(postId: ID!, status: Boolean): Post
  likePost(postId: ID!, userId: ID!): Post
  dislikePost(postId: ID!, userId: ID!): Post
}

type Subscription {
  newBlogPost(blogName: String!): Post
}

type User {
  id: ID!
  writtenPosts: [Post!]!
  likedPosts: [Post!]!
  name: String!
  sessionHash: String!
  created: DateTime!
}

type Blog {
  id: ID!
  posts: [Post!]!
  name: String!
  created: DateTime!
}

type Post {
  id: ID!
  author: User!
  likedBy: [User!]!
  blog: Blog!
  published: Boolean!
  content: String!
  created: DateTime!
}
